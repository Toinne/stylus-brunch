// Generated by CoffeeScript 1.6.3
var StylusCompiler, exec, fs, nib, progeny, spawn, stylus, sysPath, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

_ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

nib = require('nib');

fs = require('fs');

stylus = require('stylus');

sysPath = require('path');

progeny = require('progeny');

module.exports = StylusCompiler = (function() {
  StylusCompiler.prototype.brunchPlugin = true;

  StylusCompiler.prototype.type = 'stylesheet';

  StylusCompiler.prototype.extension = 'styl';

  function StylusCompiler(config) {
    var _ref1;
    this.config = config;
    this.compile = __bind(this.compile, this);
    if (this.config.stylus) {
      console.warn("Warning: config.stylus is deprecated, move it to config.plugins.stylus");
      this.cfg = this.config.stylus;
    } else {
      this.cfg = ((_ref1 = this.config.plugins) != null ? _ref1.stylus : void 0) != null ? this.config.plugins.stylus : {};
    }
    this.getDependencies = progeny({
      rootPath: this.config.paths.root
    });
  }

  StylusCompiler.prototype.compile = function(data, path, callback) {
    var compiler, defines, _ref1, _ref2, _ref3, _ref4;
    compiler = stylus(data).set('filename', path).set('compress', false).set('firebug', !!this.cfg.firebug).set('linenos', !!this.cfg.linenos).set('include css', !!this.cfg.includeCss).include(sysPath.join(this.config.paths.root)).include(sysPath.dirname(path)).use(nib());
    if (this.cfg !== {}) {
      defines = (_ref1 = this.cfg.defines) != null ? _ref1 : {};
      Object.keys(defines).forEach(function(name) {
        return compiler.define(name, defines[name]);
      });
      if ((_ref2 = this.cfg.paths) != null) {
        _ref2.forEach(function(path) {
          return compiler.include(path);
        });
      }
      if ((_ref3 = this.cfg.imports) != null) {
        _ref3.forEach(function(relativePath) {
          return compiler["import"](relativePath);
        });
      }
      if ((_ref4 = this.cfg.plugins) != null) {
        _ref4.forEach(function(pluginName) {
          var handler,
            _this = this;
          handler = function(plugin) {
            return compiler.use(plugin());
          };
          if (typeof define !== "undefined" && define !== null ? define.amd : void 0) {
            return require([pluginName], handler);
          } else {
            return handler(require(pluginName));
          }
        });
      }
    }
    return compiler.render(callback);
  };

  return StylusCompiler;

})();
